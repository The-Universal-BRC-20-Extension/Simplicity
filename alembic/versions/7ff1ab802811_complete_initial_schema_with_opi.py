"""Complete initial schema with OPI

Revision ID: 7ff1ab802811
Revises: 
Create Date: 2025-07-11 20:42:18.240674

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7ff1ab802811'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('balances',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('address', sa.String(), nullable=False),
    sa.Column('ticker', sa.String(), nullable=False),
    sa.Column('balance', sa.String(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('address', 'ticker')
    )
    op.create_index(op.f('ix_balances_address'), 'balances', ['address'], unique=False)
    op.create_index(op.f('ix_balances_ticker'), 'balances', ['ticker'], unique=False)
    op.drop_index(op.f('ix_opi_operations_block_height'), table_name='opi_operations')
    op.drop_index(op.f('ix_opi_operations_opi_id'), table_name='opi_operations')
    op.drop_index(op.f('ix_opi_operations_txid'), table_name='opi_operations')
    op.drop_table('opi_operations')
    op.drop_index(op.f('ix_opi_configurations_opi_id'), table_name='opi_configurations')
    op.drop_table('opi_configurations')
    op.add_column('brc20_operations', sa.Column('vout_index', sa.Integer(), nullable=False))
    op.add_column('brc20_operations', sa.Column('operation', sa.String(), nullable=False))
    op.add_column('brc20_operations', sa.Column('ticker', sa.String(), nullable=True))
    op.add_column('brc20_operations', sa.Column('amount', sa.String(), nullable=True))
    op.add_column('brc20_operations', sa.Column('from_address', sa.String(), nullable=True))
    op.add_column('brc20_operations', sa.Column('to_address', sa.String(), nullable=True))
    op.add_column('brc20_operations', sa.Column('block_hash', sa.String(), nullable=False))
    op.add_column('brc20_operations', sa.Column('tx_index', sa.Integer(), nullable=False))
    op.add_column('brc20_operations', sa.Column('timestamp', sa.DateTime(), nullable=False))
    op.add_column('brc20_operations', sa.Column('is_valid', sa.Boolean(), nullable=False))
    op.add_column('brc20_operations', sa.Column('error_code', sa.String(), nullable=True))
    op.add_column('brc20_operations', sa.Column('error_message', sa.String(), nullable=True))
    op.add_column('brc20_operations', sa.Column('raw_op_return', sa.String(), nullable=False))
    op.add_column('brc20_operations', sa.Column('parsed_json', sa.String(), nullable=True))
    op.add_column('brc20_operations', sa.Column('is_marketplace', sa.Boolean(), nullable=False))
    op.create_index(op.f('ix_brc20_operations_block_height'), 'brc20_operations', ['block_height'], unique=False)
    op.create_index(op.f('ix_brc20_operations_from_address'), 'brc20_operations', ['from_address'], unique=False)
    op.create_index(op.f('ix_brc20_operations_is_marketplace'), 'brc20_operations', ['is_marketplace'], unique=False)
    op.create_index(op.f('ix_brc20_operations_is_valid'), 'brc20_operations', ['is_valid'], unique=False)
    op.create_index(op.f('ix_brc20_operations_ticker'), 'brc20_operations', ['ticker'], unique=False)
    op.create_index(op.f('ix_brc20_operations_to_address'), 'brc20_operations', ['to_address'], unique=False)
    op.create_index(op.f('ix_brc20_operations_txid'), 'brc20_operations', ['txid'], unique=False)
    op.create_unique_constraint(None, 'brc20_operations', ['txid', 'vout_index'])
    op.drop_column('brc20_operations', 'operation_type')
    op.drop_column('brc20_operations', 'operation_data')
    op.drop_column('brc20_operations', 'created_at')
    op.add_column('deploys', sa.Column('limit_per_op', sa.String(), nullable=True))
    op.add_column('deploys', sa.Column('deploy_height', sa.Integer(), nullable=False))
    op.add_column('deploys', sa.Column('deploy_timestamp', sa.DateTime(), nullable=False))
    op.add_column('deploys', sa.Column('deployer_address', sa.String(), nullable=True))
    op.alter_column('deploys', 'max_supply',
               existing_type=sa.NUMERIC(),
               type_=sa.String(),
               existing_nullable=False)
    op.drop_constraint(op.f('deploys_ticker_key'), 'deploys', type_='unique')
    op.create_index(op.f('ix_deploys_deployer_address'), 'deploys', ['deployer_address'], unique=False)
    op.create_index(op.f('ix_deploys_ticker'), 'deploys', ['ticker'], unique=True)
    op.drop_column('deploys', 'deploy_satoshi_address')
    op.drop_column('deploys', 'deploy_block_height')
    op.drop_column('deploys', 'decimals')
    op.drop_column('deploys', 'limit_per_mint')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('deploys', sa.Column('limit_per_mint', sa.NUMERIC(), autoincrement=False, nullable=True))
    op.add_column('deploys', sa.Column('decimals', sa.INTEGER(), server_default=sa.text('18'), autoincrement=False, nullable=False))
    op.add_column('deploys', sa.Column('deploy_block_height', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('deploys', sa.Column('deploy_satoshi_address', sa.VARCHAR(length=34), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_deploys_ticker'), table_name='deploys')
    op.drop_index(op.f('ix_deploys_deployer_address'), table_name='deploys')
    op.create_unique_constraint(op.f('deploys_ticker_key'), 'deploys', ['ticker'], postgresql_nulls_not_distinct=False)
    op.alter_column('deploys', 'max_supply',
               existing_type=sa.String(),
               type_=sa.NUMERIC(),
               existing_nullable=False)
    op.drop_column('deploys', 'deployer_address')
    op.drop_column('deploys', 'deploy_timestamp')
    op.drop_column('deploys', 'deploy_height')
    op.drop_column('deploys', 'limit_per_op')
    op.add_column('brc20_operations', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('brc20_operations', sa.Column('operation_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('brc20_operations', sa.Column('operation_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'brc20_operations', type_='unique')
    op.drop_index(op.f('ix_brc20_operations_txid'), table_name='brc20_operations')
    op.drop_index(op.f('ix_brc20_operations_to_address'), table_name='brc20_operations')
    op.drop_index(op.f('ix_brc20_operations_ticker'), table_name='brc20_operations')
    op.drop_index(op.f('ix_brc20_operations_is_valid'), table_name='brc20_operations')
    op.drop_index(op.f('ix_brc20_operations_is_marketplace'), table_name='brc20_operations')
    op.drop_index(op.f('ix_brc20_operations_from_address'), table_name='brc20_operations')
    op.drop_index(op.f('ix_brc20_operations_block_height'), table_name='brc20_operations')
    op.drop_column('brc20_operations', 'is_marketplace')
    op.drop_column('brc20_operations', 'parsed_json')
    op.drop_column('brc20_operations', 'raw_op_return')
    op.drop_column('brc20_operations', 'error_message')
    op.drop_column('brc20_operations', 'error_code')
    op.drop_column('brc20_operations', 'is_valid')
    op.drop_column('brc20_operations', 'timestamp')
    op.drop_column('brc20_operations', 'tx_index')
    op.drop_column('brc20_operations', 'block_hash')
    op.drop_column('brc20_operations', 'to_address')
    op.drop_column('brc20_operations', 'from_address')
    op.drop_column('brc20_operations', 'amount')
    op.drop_column('brc20_operations', 'ticker')
    op.drop_column('brc20_operations', 'operation')
    op.drop_column('brc20_operations', 'vout_index')
    op.create_table('opi_configurations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('opi_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('is_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('version', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('configuration', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('opi_configurations_pkey')),
    sa.UniqueConstraint('opi_id', name=op.f('opi_configurations_opi_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_opi_configurations_opi_id'), 'opi_configurations', ['opi_id'], unique=False)
    op.create_table('opi_operations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('opi_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('txid', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('block_height', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('operation_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('validation_result', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('processing_result', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('opi_operations_pkey'))
    )
    op.create_index(op.f('ix_opi_operations_txid'), 'opi_operations', ['txid'], unique=False)
    op.create_index(op.f('ix_opi_operations_opi_id'), 'opi_operations', ['opi_id'], unique=False)
    op.create_index(op.f('ix_opi_operations_block_height'), 'opi_operations', ['block_height'], unique=False)
    op.drop_index(op.f('ix_balances_ticker'), table_name='balances')
    op.drop_index(op.f('ix_balances_address'), table_name='balances')
    op.drop_table('balances')
    # ### end Alembic commands ###
